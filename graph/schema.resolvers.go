package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.22

import (
	"context"
	"fmt"

	"github.com/imagekit-developer/imagekit-go/api/uploader"
	"github.com/rifkiystark/portfolios-api/database"
	"github.com/rifkiystark/portfolios-api/graph/model"
	"github.com/sirupsen/logrus"
)

// CreateProject is the resolver for the createProject field.
func (r *mutationResolver) CreateProject(ctx context.Context, input model.CreateProject) (*model.Project, error) {
	resp, err := r.IK.Uploader.Upload(ctx, input.Image.File, uploader.UploadParam{
		FileName: input.Image.Filename,
	})
	if err != nil {
		fmt.Printf("Error: %v", err)
		return nil, err
	}

	logrus.Infof("imagekit response: %+v", resp)

	newProject := input.ToProjectEntity()
	newProject.ImageURL = resp.Data.Url

	err = r.DB.CreateProject(&newProject)
	if err != nil {
		logrus.Errorf("error creating project: %v", err)
		return nil, err
	}

	project := model.Project{}
	project.FillModelByDBEntity(newProject)

	return &project, nil
}

// UpdateProject is the resolver for the updateProject field.
func (r *mutationResolver) UpdateProject(ctx context.Context, id string, input model.UpdateProject) (*model.Project, error) {
	if input.AdditionalInfo == nil && input.Description == nil && input.Image == nil && input.Title == nil {
		return nil, fmt.Errorf("No input provided")
	}

	updateProject := database.Project{}

	if input.Title != nil {
		updateProject.Title = *input.Title
	}

	if input.Description != nil {
		updateProject.Description = *input.Description
	}

	if input.AdditionalInfo != nil {
		updateProject.AdditionalInfo = input.AdditionalInfo
	}
	if input.Image != nil {
		resp, err := r.IK.Uploader.Upload(ctx, input.Image.File, uploader.UploadParam{
			FileName: input.Image.Filename,
		})
		if err != nil {
			fmt.Printf("Error: %v", err)
			return nil, err
		}
		updateProject.ImageURL = resp.Data.Url
	}

	r.DB.UpdateProject(id, &updateProject)

	project := model.Project{}
	project.FillModelByDBEntity(updateProject)

	return &project, nil
}

// DeleteProject is the resolver for the deleteProject field.
func (r *mutationResolver) DeleteProject(ctx context.Context, id string) (*model.Project, error) {
	project, err := r.DB.FindProjectById(id)
	if err != nil {
		return nil, err
	}

	logrus.Infof("project: %+v", project)
	deleted, err := r.DB.DeleteProject(id)
	if err != nil {
		return nil, err
	}

	if deleted {
		ikFileId := project.ImageURL[len("https://ik.imagekit.io/4ynvfo9vu/"):len(project.ImageURL)]
		_, err := r.IK.Media.DeleteFile(ctx, ikFileId)
		logrus.Info("ikFileId: ", ikFileId)
		if err != nil {
			logrus.Error(err)
		}
	}

	projectModel := model.Project{}
	projectModel.FillModelByDBEntity(project)

	return &projectModel, nil
}

// Project is the resolver for the project field.
func (r *queryResolver) Project(ctx context.Context, id string) (*model.Project, error) {
	project, err := r.DB.FindProjectById(id)

	if err != nil {
		return nil, err
	}

	projectModel := model.Project{}
	projectModel.FillModelByDBEntity(project)

	return &projectModel, nil
}

// Projects is the resolver for the projects field.
func (r *queryResolver) Projects(ctx context.Context, search *string) ([]*model.Project, error) {
	projects, err := r.DB.AllProjects(search)
	if err != nil {
		return nil, err
	}

	var projectsModel []*model.Project

	for _, project := range projects {
		projectModel := model.Project{}
		projectModel.FillModelByDBEntity(project)
		projectsModel = append(projectsModel, &projectModel)
	}
	return projectsModel, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
